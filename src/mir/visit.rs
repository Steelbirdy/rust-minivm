use crate::{
    common::{Int, Reg},
    mir,
    vm::Value,
};

visit_trait![mir::Instruction:
    Exit => visit_exit();
    Func => visit_func(end: usize, num_regs: Reg);
    RegA => visit_reg_a(addr: usize, to: Reg);
    RegR => visit_reg_r(from: Reg, to: Reg);
    BranchNz => visit_branch_nz(cond: Reg, addr_f: usize, addr_t: usize);
    BranchEqRR => visit_branch_eq_rr(lhs: Reg, rhs: Reg, addr_f: usize, addr_t: usize);
    BranchEqIR => visit_branch_eq_ir(lhs: Int, rhs: Reg, addr_f: usize, addr_t: usize);
    BranchLtRR => visit_branch_lt_rr(lhs: Reg, rhs: Reg, addr_f: usize, addr_t: usize);
    BranchLtRI => visit_branch_lt_ri(lhs: Reg, rhs: Int, addr_f: usize, addr_t: usize);
    BranchLtIR => visit_branch_lt_ir(lhs: Int, rhs: Reg, addr_f: usize, addr_t: usize);
    Jump => visit_jump(addr: usize);
    JumpEz => visit_jump_ez(cond: Reg, addr: usize);
    JumpNz => visit_jump_nz(cond: Reg, addr: usize);
    JumpLtRR => visit_jump_lt_rr(lhs: Reg, rhs: Reg, addr: usize);
    JumpLtRI => visit_jump_lt_ri(lhs: Reg, rhs: Value, addr: usize);
    JumpLtIR => visit_jump_lt_ir(lhs: Value, rhs: Reg, addr: usize);
    JumpLeRR => visit_jump_le_rr(lhs: Reg, rhs: Reg, addr: usize);
    JumpLeRI => visit_jump_le_ri(lhs: Reg, rhs: Value, addr: usize);
    JumpLeIR => visit_jump_le_ir(lhs: Value, rhs: Reg, addr: usize);
    JumpEqRR => visit_jump_eq_rr(lhs: Reg, rhs: Reg, addr: usize);
    JumpEqIR => visit_jump_eq_ir(lhs: Value, rhs: Reg, addr: usize);
    JumpNeRR => visit_jump_ne_rr(lhs: Reg, rhs: Reg, addr: usize);
    JumpNeIR => visit_jump_ne_ir(lhs: Value, rhs: Reg, addr: usize);
    Call0 => visit_call0(addr: usize, num_regs: Reg, to: Reg);
    Call1 => visit_call1(addr: usize, [&] args: &[Reg; 1], num_regs: Reg, to: Reg);
    Call2 => visit_call2(addr: usize, [&] args: &[Reg; 2], num_regs: Reg, to: Reg);
    Call3 => visit_call3(addr: usize, [&] args: &[Reg; 3], num_regs: Reg, to: Reg);
    Call4 => visit_call4(addr: usize, [&] args: &[Reg; 4], num_regs: Reg, to: Reg);
    Call5 => visit_call5(addr: usize, [&] args: &[Reg; 5], num_regs: Reg, to: Reg);
    Call6 => visit_call6(addr: usize, [&] args: &[Reg; 6], num_regs: Reg, to: Reg);
    Call7 => visit_call7(addr: usize, [&] args: &[Reg; 7], num_regs: Reg, to: Reg);
    Call8 => visit_call8(addr: usize, [&] args: &[Reg; 8], num_regs: Reg, to: Reg);
    CallL => visit_call_l(addr: usize, num_args: u32, [&] args: &[Reg], num_regs: Reg, to: Reg);
    DJump => visit_djump(addr: Reg);
    DCall0 => visit_dcall0(addr: Reg, num_regs: Reg, to: Reg);
    DCall1 => visit_dcall1(addr: Reg, [&] args: &[Reg; 1], num_regs: Reg, to: Reg);
    DCall2 => visit_dcall2(addr: Reg, [&] args: &[Reg; 2], num_regs: Reg, to: Reg);
    DCall3 => visit_dcall3(addr: Reg, [&] args: &[Reg; 3], num_regs: Reg, to: Reg);
    DCall4 => visit_dcall4(addr: Reg, [&] args: &[Reg; 4], num_regs: Reg, to: Reg);
    DCall5 => visit_dcall5(addr: Reg, [&] args: &[Reg; 5], num_regs: Reg, to: Reg);
    DCall6 => visit_dcall6(addr: Reg, [&] args: &[Reg; 6], num_regs: Reg, to: Reg);
    DCall7 => visit_dcall7(addr: Reg, [&] args: &[Reg; 7], num_regs: Reg, to: Reg);
    DCall8 => visit_dcall8(addr: Reg, [&] args: &[Reg; 8], num_regs: Reg, to: Reg);
    DCallL => visit_dcall_l(addr: Reg, num_args: u32, [&] args: &[Reg], num_regs: Reg, to: Reg);
    RetR => visit_ret_r(reg: Reg);
    RetV => visit_ret_v(val: Value);
    Value => visit_value(val: Value, to: Reg);
    AddRR => visit_add_rr(lhs: Reg, rhs: Reg, to: Reg);
    AddIR => visit_add_ir(lhs: Int, rhs: Reg, to: Reg);
    SubRR => visit_sub_rr(lhs: Reg, rhs: Reg, to: Reg);
    SubRI => visit_sub_ri(lhs: Reg, rhs: Int, to: Reg);
    SubIR => visit_sub_ir(lhs: Int, rhs: Reg, to: Reg);
    MulRR => visit_mul_rr(lhs: Reg, rhs: Reg, to: Reg);
    MulIR => visit_mul_ir(lhs: Int, rhs: Reg, to: Reg);
    DivRR => visit_div_rr(lhs: Reg, rhs: Reg, to: Reg);
    DivRI => visit_div_ri(lhs: Reg, rhs: Int, to: Reg);
    DivIR => visit_div_ir(lhs: Int, rhs: Reg, to: Reg);
    ModRR => visit_mod_rr(lhs: Reg, rhs: Reg, to: Reg);
    ModRI => visit_mod_ri(lhs: Reg, rhs: Int, to: Reg);
    ModIR => visit_mod_ir(lhs: Int, rhs: Reg, to: Reg);
    Neg => visit_neg(reg: Reg, to: Reg);
    Incr => visit_incr(reg: Reg);
    Decr => visit_decr(reg: Reg);
    ArrR => visit_arr_r(len: Reg, to: Reg);
    ArrI => visit_arr_i(len: Int, to: Reg);
    GetR => visit_get_r(arr: Reg, idx: Reg, to: Reg);
    GetI => visit_get_i(arr: Reg, idx: Int, to: Reg);
    SetII => visit_set_ii(arr: Reg, idx: Int, val: Value);
    SetRR => visit_set_rr(arr: Reg, idx: Reg, val: Reg);
    SetRI => visit_set_ri(arr: Reg, idx: Reg, val: Value);
    SetIR => visit_set_ir(arr: Reg, idx: Int, val: Reg);
    Len => visit_len(arr: Reg, to: Reg);
    Type => visit_type(obj: Reg, to: Reg);
    PutcR => visit_putc_r(ch: Reg);
    PutcI => visit_putc_i(ch: u32);
];
